/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package edu.illinois.cs.cogcomp.thrift.curator;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 * Record's are the objects that hold all annotations on a text.
 *
 * <code>identifier</code> - a unique identifier for this record.<br/>
 * <code>rawText</code> - the raw text associated with this record.<br/>
 * <code>labelViews</code> - Label views. Contains all the Labelings for this record.<br/>
 * <code>clusterViews</code> - Cluster views. Contains all the Clusterings for this record.<br/>
 * <code>parseViews</code> - Parse views. Contains all the Forests for this record.<br/>
 * <code>views</code> - Label views. Contains all the Views for this record.<br/>
 * <code>whitespaced</code> - Was this Record created using a ws* method?<br/>
 *
 */
public class Record implements TBase<Record, Record._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("Record");

    private static final TField IDENTIFIER_FIELD_DESC = new TField("identifier", TType.STRING, (short)1);
    private static final TField RAW_TEXT_FIELD_DESC = new TField("rawText", TType.STRING, (short)2);
    private static final TField LABEL_VIEWS_FIELD_DESC = new TField("labelViews", TType.MAP, (short)3);
    private static final TField CLUSTER_VIEWS_FIELD_DESC = new TField("clusterViews", TType.MAP, (short)4);
    private static final TField PARSE_VIEWS_FIELD_DESC = new TField("parseViews", TType.MAP, (short)5);
    private static final TField VIEWS_FIELD_DESC = new TField("views", TType.MAP, (short)6);
    private static final TField WHITESPACED_FIELD_DESC = new TField("whitespaced", TType.BOOL, (short)7);

    /**
     * how to identify this record.
     */
    public String identifier;
    /**
     * The raw text string.
     */
    public String rawText;
    /**
     * Label views.  Contains all the Labelings.
     */
    public Map<String,edu.illinois.cs.cogcomp.thrift.base.Labeling> labelViews;
    /**
     * Cluster views.  Contains all the Clusterings.
     */
    public Map<String,edu.illinois.cs.cogcomp.thrift.base.Clustering> clusterViews;
    /**
     * Parse views.  Contains all the Forests.
     */
    public Map<String,edu.illinois.cs.cogcomp.thrift.base.Forest> parseViews;
    /**
     * General views.  Contains all the Views.
     */
    public Map<String,edu.illinois.cs.cogcomp.thrift.base.View> views;
    /**
     * Was this Record created using a ws* method.
     */
    public boolean whitespaced;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
        /**
         * how to identify this record.
         */
        IDENTIFIER((short)1, "identifier"),
        /**
         * The raw text string.
         */
        RAW_TEXT((short)2, "rawText"),
        /**
         * Label views.  Contains all the Labelings.
         */
        LABEL_VIEWS((short)3, "labelViews"),
        /**
         * Cluster views.  Contains all the Clusterings.
         */
        CLUSTER_VIEWS((short)4, "clusterViews"),
        /**
         * Parse views.  Contains all the Forests.
         */
        PARSE_VIEWS((short)5, "parseViews"),
        /**
         * General views.  Contains all the Views.
         */
        VIEWS((short)6, "views"),
        /**
         * Was this Record created using a ws* method.
         */
        WHITESPACED((short)7, "whitespaced");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // IDENTIFIER
                    return IDENTIFIER;
                case 2: // RAW_TEXT
                    return RAW_TEXT;
                case 3: // LABEL_VIEWS
                    return LABEL_VIEWS;
                case 4: // CLUSTER_VIEWS
                    return CLUSTER_VIEWS;
                case 5: // PARSE_VIEWS
                    return PARSE_VIEWS;
                case 6: // VIEWS
                    return VIEWS;
                case 7: // WHITESPACED
                    return WHITESPACED;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __WHITESPACED_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
        Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.IDENTIFIER, new FieldMetaData("identifier", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.RAW_TEXT, new FieldMetaData("rawText", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.LABEL_VIEWS, new FieldMetaData("labelViews", TFieldRequirementType.REQUIRED,
                new MapMetaData(TType.MAP,
                        new FieldValueMetaData(TType.STRING),
                        new StructMetaData(TType.STRUCT, edu.illinois.cs.cogcomp.thrift.base.Labeling.class))));
        tmpMap.put(_Fields.CLUSTER_VIEWS, new FieldMetaData("clusterViews", TFieldRequirementType.REQUIRED,
                new MapMetaData(TType.MAP,
                        new FieldValueMetaData(TType.STRING),
                        new StructMetaData(TType.STRUCT, edu.illinois.cs.cogcomp.thrift.base.Clustering.class))));
        tmpMap.put(_Fields.PARSE_VIEWS, new FieldMetaData("parseViews", TFieldRequirementType.REQUIRED,
                new MapMetaData(TType.MAP,
                        new FieldValueMetaData(TType.STRING),
                        new StructMetaData(TType.STRUCT, edu.illinois.cs.cogcomp.thrift.base.Forest.class))));
        tmpMap.put(_Fields.VIEWS, new FieldMetaData("views", TFieldRequirementType.REQUIRED,
                new MapMetaData(TType.MAP,
                        new FieldValueMetaData(TType.STRING),
                        new StructMetaData(TType.STRUCT, edu.illinois.cs.cogcomp.thrift.base.View.class))));
        tmpMap.put(_Fields.WHITESPACED, new FieldMetaData("whitespaced", TFieldRequirementType.REQUIRED,
                new FieldValueMetaData(TType.BOOL)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        FieldMetaData.addStructMetaDataMap(Record.class, metaDataMap);
    }

    public Record() {
    }

    public Record(
            String identifier,
            String rawText,
            Map<String,edu.illinois.cs.cogcomp.thrift.base.Labeling> labelViews,
            Map<String,edu.illinois.cs.cogcomp.thrift.base.Clustering> clusterViews,
            Map<String,edu.illinois.cs.cogcomp.thrift.base.Forest> parseViews,
            Map<String,edu.illinois.cs.cogcomp.thrift.base.View> views,
            boolean whitespaced)
    {
        this();
        this.identifier = identifier;
        this.rawText = rawText;
        this.labelViews = labelViews;
        this.clusterViews = clusterViews;
        this.parseViews = parseViews;
        this.views = views;
        this.whitespaced = whitespaced;
        setWhitespacedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Record(Record other) {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        if (other.isSetIdentifier()) {
            this.identifier = other.identifier;
        }
        if (other.isSetRawText()) {
            this.rawText = other.rawText;
        }
        if (other.isSetLabelViews()) {
            Map<String,edu.illinois.cs.cogcomp.thrift.base.Labeling> __this__labelViews = new HashMap<String,edu.illinois.cs.cogcomp.thrift.base.Labeling>();
            for (Map.Entry<String, edu.illinois.cs.cogcomp.thrift.base.Labeling> other_element : other.labelViews.entrySet()) {

                String other_element_key = other_element.getKey();
                edu.illinois.cs.cogcomp.thrift.base.Labeling other_element_value = other_element.getValue();

                String __this__labelViews_copy_key = other_element_key;

                edu.illinois.cs.cogcomp.thrift.base.Labeling __this__labelViews_copy_value = new edu.illinois.cs.cogcomp.thrift.base.Labeling(other_element_value);

                __this__labelViews.put(__this__labelViews_copy_key, __this__labelViews_copy_value);
            }
            this.labelViews = __this__labelViews;
        }
        if (other.isSetClusterViews()) {
            Map<String,edu.illinois.cs.cogcomp.thrift.base.Clustering> __this__clusterViews = new HashMap<String,edu.illinois.cs.cogcomp.thrift.base.Clustering>();
            for (Map.Entry<String, edu.illinois.cs.cogcomp.thrift.base.Clustering> other_element : other.clusterViews.entrySet()) {

                String other_element_key = other_element.getKey();
                edu.illinois.cs.cogcomp.thrift.base.Clustering other_element_value = other_element.getValue();

                String __this__clusterViews_copy_key = other_element_key;

                edu.illinois.cs.cogcomp.thrift.base.Clustering __this__clusterViews_copy_value = new edu.illinois.cs.cogcomp.thrift.base.Clustering(other_element_value);

                __this__clusterViews.put(__this__clusterViews_copy_key, __this__clusterViews_copy_value);
            }
            this.clusterViews = __this__clusterViews;
        }
        if (other.isSetParseViews()) {
            Map<String,edu.illinois.cs.cogcomp.thrift.base.Forest> __this__parseViews = new HashMap<String,edu.illinois.cs.cogcomp.thrift.base.Forest>();
            for (Map.Entry<String, edu.illinois.cs.cogcomp.thrift.base.Forest> other_element : other.parseViews.entrySet()) {

                String other_element_key = other_element.getKey();
                edu.illinois.cs.cogcomp.thrift.base.Forest other_element_value = other_element.getValue();

                String __this__parseViews_copy_key = other_element_key;

                edu.illinois.cs.cogcomp.thrift.base.Forest __this__parseViews_copy_value = new edu.illinois.cs.cogcomp.thrift.base.Forest(other_element_value);

                __this__parseViews.put(__this__parseViews_copy_key, __this__parseViews_copy_value);
            }
            this.parseViews = __this__parseViews;
        }
        if (other.isSetViews()) {
            Map<String,edu.illinois.cs.cogcomp.thrift.base.View> __this__views = new HashMap<String,edu.illinois.cs.cogcomp.thrift.base.View>();
            for (Map.Entry<String, edu.illinois.cs.cogcomp.thrift.base.View> other_element : other.views.entrySet()) {

                String other_element_key = other_element.getKey();
                edu.illinois.cs.cogcomp.thrift.base.View other_element_value = other_element.getValue();

                String __this__views_copy_key = other_element_key;

                edu.illinois.cs.cogcomp.thrift.base.View __this__views_copy_value = new edu.illinois.cs.cogcomp.thrift.base.View(other_element_value);

                __this__views.put(__this__views_copy_key, __this__views_copy_value);
            }
            this.views = __this__views;
        }
        this.whitespaced = other.whitespaced;
    }

    public Record deepCopy() {
        return new Record(this);
    }

    @Deprecated
    public Record clone() {
        return new Record(this);
    }

    @Override
    public void clear() {
        this.identifier = null;
        this.rawText = null;
        this.labelViews = null;
        this.clusterViews = null;
        this.parseViews = null;
        this.views = null;
        setWhitespacedIsSet(false);
        this.whitespaced = false;
    }

    /**
     * how to identify this record.
     */
    public String getIdentifier() {
        return this.identifier;
    }

    /**
     * how to identify this record.
     */
    public Record setIdentifier(String identifier) {
        this.identifier = identifier;
        return this;
    }

    public void unsetIdentifier() {
        this.identifier = null;
    }

    /** Returns true if field identifier is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentifier() {
        return this.identifier != null;
    }

    public void setIdentifierIsSet(boolean value) {
        if (!value) {
            this.identifier = null;
        }
    }

    /**
     * The raw text string.
     */
    public String getRawText() {
        return this.rawText;
    }

    /**
     * The raw text string.
     */
    public Record setRawText(String rawText) {
        this.rawText = rawText;
        return this;
    }

    public void unsetRawText() {
        this.rawText = null;
    }

    /** Returns true if field rawText is set (has been assigned a value) and false otherwise */
    public boolean isSetRawText() {
        return this.rawText != null;
    }

    public void setRawTextIsSet(boolean value) {
        if (!value) {
            this.rawText = null;
        }
    }

    public int getLabelViewsSize() {
        return (this.labelViews == null) ? 0 : this.labelViews.size();
    }

    public void putToLabelViews(String key, edu.illinois.cs.cogcomp.thrift.base.Labeling val) {
        if (this.labelViews == null) {
            this.labelViews = new HashMap<String,edu.illinois.cs.cogcomp.thrift.base.Labeling>();
        }
        this.labelViews.put(key, val);
    }

    /**
     * Label views.  Contains all the Labelings.
     */
    public Map<String,edu.illinois.cs.cogcomp.thrift.base.Labeling> getLabelViews() {
        return this.labelViews;
    }

    /**
     * Label views.  Contains all the Labelings.
     */
    public Record setLabelViews(Map<String,edu.illinois.cs.cogcomp.thrift.base.Labeling> labelViews) {
        this.labelViews = labelViews;
        return this;
    }

    public void unsetLabelViews() {
        this.labelViews = null;
    }

    /** Returns true if field labelViews is set (has been asigned a value) and false otherwise */
    public boolean isSetLabelViews() {
        return this.labelViews != null;
    }

    public void setLabelViewsIsSet(boolean value) {
        if (!value) {
            this.labelViews = null;
        }
    }

    public int getClusterViewsSize() {
        return (this.clusterViews == null) ? 0 : this.clusterViews.size();
    }

    public void putToClusterViews(String key, edu.illinois.cs.cogcomp.thrift.base.Clustering val) {
        if (this.clusterViews == null) {
            this.clusterViews = new HashMap<String,edu.illinois.cs.cogcomp.thrift.base.Clustering>();
        }
        this.clusterViews.put(key, val);
    }

    /**
     * Cluster views.  Contains all the Clusterings.
     */
    public Map<String,edu.illinois.cs.cogcomp.thrift.base.Clustering> getClusterViews() {
        return this.clusterViews;
    }

    /**
     * Cluster views.  Contains all the Clusterings.
     */
    public Record setClusterViews(Map<String,edu.illinois.cs.cogcomp.thrift.base.Clustering> clusterViews) {
        this.clusterViews = clusterViews;
        return this;
    }

    public void unsetClusterViews() {
        this.clusterViews = null;
    }

    /** Returns true if field clusterViews is set (has been asigned a value) and false otherwise */
    public boolean isSetClusterViews() {
        return this.clusterViews != null;
    }

    public void setClusterViewsIsSet(boolean value) {
        if (!value) {
            this.clusterViews = null;
        }
    }

    public int getParseViewsSize() {
        return (this.parseViews == null) ? 0 : this.parseViews.size();
    }

    public void putToParseViews(String key, edu.illinois.cs.cogcomp.thrift.base.Forest val) {
        if (this.parseViews == null) {
            this.parseViews = new HashMap<String,edu.illinois.cs.cogcomp.thrift.base.Forest>();
        }
        this.parseViews.put(key, val);
    }

    /**
     * Parse views.  Contains all the Forests.
     */
    public Map<String,edu.illinois.cs.cogcomp.thrift.base.Forest> getParseViews() {
        return this.parseViews;
    }

    /**
     * Parse views.  Contains all the Forests.
     */
    public Record setParseViews(Map<String,edu.illinois.cs.cogcomp.thrift.base.Forest> parseViews) {
        this.parseViews = parseViews;
        return this;
    }

    public void unsetParseViews() {
        this.parseViews = null;
    }

    /** Returns true if field parseViews is set (has been asigned a value) and false otherwise */
    public boolean isSetParseViews() {
        return this.parseViews != null;
    }

    public void setParseViewsIsSet(boolean value) {
        if (!value) {
            this.parseViews = null;
        }
    }

    public int getViewsSize() {
        return (this.views == null) ? 0 : this.views.size();
    }

    public void putToViews(String key, edu.illinois.cs.cogcomp.thrift.base.View val) {
        if (this.views == null) {
            this.views = new HashMap<String,edu.illinois.cs.cogcomp.thrift.base.View>();
        }
        this.views.put(key, val);
    }

    /**
     * General views.  Contains all the Views.
     */
    public Map<String,edu.illinois.cs.cogcomp.thrift.base.View> getViews() {
        return this.views;
    }

    /**
     * General views.  Contains all the Views.
     */
    public Record setViews(Map<String,edu.illinois.cs.cogcomp.thrift.base.View> views) {
        this.views = views;
        return this;
    }

    public void unsetViews() {
        this.views = null;
    }

    /** Returns true if field views is set (has been asigned a value) and false otherwise */
    public boolean isSetViews() {
        return this.views != null;
    }

    public void setViewsIsSet(boolean value) {
        if (!value) {
            this.views = null;
        }
    }

    /**
     * Was this Record created using a ws* method.
     */
    public boolean isWhitespaced() {
        return this.whitespaced;
    }

    /**
     * Was this Record created using a ws* method.
     */
    public Record setWhitespaced(boolean whitespaced) {
        this.whitespaced = whitespaced;
        setWhitespacedIsSet(true);
        return this;
    }

    public void unsetWhitespaced() {
        __isset_bit_vector.clear(__WHITESPACED_ISSET_ID);
    }

    /** Returns true if field whitespaced is set (has been asigned a value) and false otherwise */
    public boolean isSetWhitespaced() {
        return __isset_bit_vector.get(__WHITESPACED_ISSET_ID);
    }

    public void setWhitespacedIsSet(boolean value) {
        __isset_bit_vector.set(__WHITESPACED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case IDENTIFIER:
                if (value == null) {
                    unsetIdentifier();
                } else {
                    setIdentifier((String)value);
                }
                break;

            case RAW_TEXT:
                if (value == null) {
                    unsetRawText();
                } else {
                    setRawText((String)value);
                }
                break;

            case LABEL_VIEWS:
                if (value == null) {
                    unsetLabelViews();
                } else {
                    setLabelViews((Map<String,edu.illinois.cs.cogcomp.thrift.base.Labeling>)value);
                }
                break;

            case CLUSTER_VIEWS:
                if (value == null) {
                    unsetClusterViews();
                } else {
                    setClusterViews((Map<String,edu.illinois.cs.cogcomp.thrift.base.Clustering>)value);
                }
                break;

            case PARSE_VIEWS:
                if (value == null) {
                    unsetParseViews();
                } else {
                    setParseViews((Map<String,edu.illinois.cs.cogcomp.thrift.base.Forest>)value);
                }
                break;

            case VIEWS:
                if (value == null) {
                    unsetViews();
                } else {
                    setViews((Map<String,edu.illinois.cs.cogcomp.thrift.base.View>)value);
                }
                break;

            case WHITESPACED:
                if (value == null) {
                    unsetWhitespaced();
                } else {
                    setWhitespaced((Boolean)value);
                }
                break;

        }
    }

    public void setFieldValue(int fieldID, Object value) {
        setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case IDENTIFIER:
                return getIdentifier();

            case RAW_TEXT:
                return getRawText();

            case LABEL_VIEWS:
                return getLabelViews();

            case CLUSTER_VIEWS:
                return getClusterViews();

            case PARSE_VIEWS:
                return getParseViews();

            case VIEWS:
                return getViews();

            case WHITESPACED:
                return new Boolean(isWhitespaced());

        }
        throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
        return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        switch (field) {
            case IDENTIFIER:
                return isSetIdentifier();
            case RAW_TEXT:
                return isSetRawText();
            case LABEL_VIEWS:
                return isSetLabelViews();
            case CLUSTER_VIEWS:
                return isSetClusterViews();
            case PARSE_VIEWS:
                return isSetParseViews();
            case VIEWS:
                return isSetViews();
            case WHITESPACED:
                return isSetWhitespaced();
        }
        throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
        return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof Record)
            return this.equals((Record)that);
        return false;
    }

    public boolean equals(Record that) {
        if (that == null)
            return false;

        boolean this_present_identifier = true && this.isSetIdentifier();
        boolean that_present_identifier = true && that.isSetIdentifier();
        if (this_present_identifier || that_present_identifier) {
            if (!(this_present_identifier && that_present_identifier))
                return false;
            if (!this.identifier.equals(that.identifier))
                return false;
        }

        boolean this_present_rawText = true && this.isSetRawText();
        boolean that_present_rawText = true && that.isSetRawText();
        if (this_present_rawText || that_present_rawText) {
            if (!(this_present_rawText && that_present_rawText))
                return false;
            if (!this.rawText.equals(that.rawText))
                return false;
        }

        boolean this_present_labelViews = true && this.isSetLabelViews();
        boolean that_present_labelViews = true && that.isSetLabelViews();
        if (this_present_labelViews || that_present_labelViews) {
            if (!(this_present_labelViews && that_present_labelViews))
                return false;
            if (!this.labelViews.equals(that.labelViews))
                return false;
        }

        boolean this_present_clusterViews = true && this.isSetClusterViews();
        boolean that_present_clusterViews = true && that.isSetClusterViews();
        if (this_present_clusterViews || that_present_clusterViews) {
            if (!(this_present_clusterViews && that_present_clusterViews))
                return false;
            if (!this.clusterViews.equals(that.clusterViews))
                return false;
        }

        boolean this_present_parseViews = true && this.isSetParseViews();
        boolean that_present_parseViews = true && that.isSetParseViews();
        if (this_present_parseViews || that_present_parseViews) {
            if (!(this_present_parseViews && that_present_parseViews))
                return false;
            if (!this.parseViews.equals(that.parseViews))
                return false;
        }

        boolean this_present_views = true && this.isSetViews();
        boolean that_present_views = true && that.isSetViews();
        if (this_present_views || that_present_views) {
            if (!(this_present_views && that_present_views))
                return false;
            if (!this.views.equals(that.views))
                return false;
        }

        boolean this_present_whitespaced = true;
        boolean that_present_whitespaced = true;
        if (this_present_whitespaced || that_present_whitespaced) {
            if (!(this_present_whitespaced && that_present_whitespaced))
                return false;
            if (this.whitespaced != that.whitespaced)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        HashCodeBuilder builder = new HashCodeBuilder();

        boolean present_identifier = true && (isSetIdentifier());
        builder.append(present_identifier);
        if (present_identifier)
            builder.append(identifier);

        boolean present_rawText = true && (isSetRawText());
        builder.append(present_rawText);
        if (present_rawText)
            builder.append(rawText);

        boolean present_labelViews = true && (isSetLabelViews());
        builder.append(present_labelViews);
        if (present_labelViews)
            builder.append(labelViews);

        boolean present_clusterViews = true && (isSetClusterViews());
        builder.append(present_clusterViews);
        if (present_clusterViews)
            builder.append(clusterViews);

        boolean present_parseViews = true && (isSetParseViews());
        builder.append(present_parseViews);
        if (present_parseViews)
            builder.append(parseViews);

        boolean present_views = true && (isSetViews());
        builder.append(present_views);
        if (present_views)
            builder.append(views);

        boolean present_whitespaced = true;
        builder.append(present_whitespaced);
        if (present_whitespaced)
            builder.append(whitespaced);

        return builder.toHashCode();
    }

    public int compareTo(Record other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        Record typedOther = (Record)other;

        lastComparison = Boolean.valueOf(isSetIdentifier()).compareTo(typedOther.isSetIdentifier());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIdentifier()) {      lastComparison = TBaseHelper.compareTo(this.identifier, typedOther.identifier);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetRawText()).compareTo(typedOther.isSetRawText());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRawText()) {      lastComparison = TBaseHelper.compareTo(this.rawText, typedOther.rawText);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetLabelViews()).compareTo(typedOther.isSetLabelViews());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetLabelViews()) {      lastComparison = TBaseHelper.compareTo(this.labelViews, typedOther.labelViews);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetClusterViews()).compareTo(typedOther.isSetClusterViews());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetClusterViews()) {      lastComparison = TBaseHelper.compareTo(this.clusterViews, typedOther.clusterViews);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetParseViews()).compareTo(typedOther.isSetParseViews());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetParseViews()) {      lastComparison = TBaseHelper.compareTo(this.parseViews, typedOther.parseViews);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetViews()).compareTo(typedOther.isSetViews());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetViews()) {      lastComparison = TBaseHelper.compareTo(this.views, typedOther.views);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetWhitespaced()).compareTo(typedOther.isSetWhitespaced());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetWhitespaced()) {      lastComparison = TBaseHelper.compareTo(this.whitespaced, typedOther.whitespaced);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public void read(TProtocol iprot) throws TException {
        TField field;
        iprot.readStructBegin();
        while (true)
        {
            field = iprot.readFieldBegin();
            if (field.type == TType.STOP) {
                break;
            }
            switch (field.id) {
                case 1: // IDENTIFIER
                    if (field.type == TType.STRING) {
                        this.identifier = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // RAW_TEXT
                    if (field.type == TType.STRING) {
                        this.rawText = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // LABEL_VIEWS
                    if (field.type == TType.MAP) {
                        {
                            TMap _map0 = iprot.readMapBegin();
                            this.labelViews = new HashMap<String,edu.illinois.cs.cogcomp.thrift.base.Labeling>(2*_map0.size);
                            for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                            {
                                String _key2;
                                edu.illinois.cs.cogcomp.thrift.base.Labeling _val3;
                                _key2 = iprot.readString();
                                _val3 = new edu.illinois.cs.cogcomp.thrift.base.Labeling();
                                _val3.read(iprot);
                                this.labelViews.put(_key2, _val3);
                            }
                            iprot.readMapEnd();
                        }
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 4: // CLUSTER_VIEWS
                    if (field.type == TType.MAP) {
                        {
                            TMap _map4 = iprot.readMapBegin();
                            this.clusterViews = new HashMap<String,edu.illinois.cs.cogcomp.thrift.base.Clustering>(2*_map4.size);
                            for (int _i5 = 0; _i5 < _map4.size; ++_i5)
                            {
                                String _key6;
                                edu.illinois.cs.cogcomp.thrift.base.Clustering _val7;
                                _key6 = iprot.readString();
                                _val7 = new edu.illinois.cs.cogcomp.thrift.base.Clustering();
                                _val7.read(iprot);
                                this.clusterViews.put(_key6, _val7);
                            }
                            iprot.readMapEnd();
                        }
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 5: // PARSE_VIEWS
                    if (field.type == TType.MAP) {
                        {
                            TMap _map8 = iprot.readMapBegin();
                            this.parseViews = new HashMap<String,edu.illinois.cs.cogcomp.thrift.base.Forest>(2*_map8.size);
                            for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                            {
                                String _key10;
                                edu.illinois.cs.cogcomp.thrift.base.Forest _val11;
                                _key10 = iprot.readString();
                                _val11 = new edu.illinois.cs.cogcomp.thrift.base.Forest();
                                _val11.read(iprot);
                                this.parseViews.put(_key10, _val11);
                            }
                            iprot.readMapEnd();
                        }
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 6: // VIEWS
                    if (field.type == TType.MAP) {
                        {
                            TMap _map12 = iprot.readMapBegin();
                            this.views = new HashMap<String,edu.illinois.cs.cogcomp.thrift.base.View>(2*_map12.size);
                            for (int _i13 = 0; _i13 < _map12.size; ++_i13)
                            {
                                String _key14;
                                edu.illinois.cs.cogcomp.thrift.base.View _val15;
                                _key14 = iprot.readString();
                                _val15 = new edu.illinois.cs.cogcomp.thrift.base.View();
                                _val15.read(iprot);
                                this.views.put(_key14, _val15);
                            }
                            iprot.readMapEnd();
                        }
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 7: // WHITESPACED
                    if (field.type == TType.BOOL) {
                        this.whitespaced = iprot.readBool();
                        setWhitespacedIsSet(true);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!isSetWhitespaced()) {
            throw new TProtocolException("Required field 'whitespaced' was not found in serialized data! Struct: " + toString());
        }
        validate();
    }

    public void write(TProtocol oprot) throws TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (this.identifier != null) {
            oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
            oprot.writeString(this.identifier);
            oprot.writeFieldEnd();
        }
        if (this.rawText != null) {
            oprot.writeFieldBegin(RAW_TEXT_FIELD_DESC);
            oprot.writeString(this.rawText);
            oprot.writeFieldEnd();
        }
        if (this.labelViews != null) {
            oprot.writeFieldBegin(LABEL_VIEWS_FIELD_DESC);
            {
                oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.labelViews.size()));
                for (Map.Entry<String, edu.illinois.cs.cogcomp.thrift.base.Labeling> _iter16 : this.labelViews.entrySet())
                {
                    oprot.writeString(_iter16.getKey());
                    _iter16.getValue().write(oprot);
                }
                oprot.writeMapEnd();
            }
            oprot.writeFieldEnd();
        }
        if (this.clusterViews != null) {
            oprot.writeFieldBegin(CLUSTER_VIEWS_FIELD_DESC);
            {
                oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.clusterViews.size()));
                for (Map.Entry<String, edu.illinois.cs.cogcomp.thrift.base.Clustering> _iter17 : this.clusterViews.entrySet())
                {
                    oprot.writeString(_iter17.getKey());
                    _iter17.getValue().write(oprot);
                }
                oprot.writeMapEnd();
            }
            oprot.writeFieldEnd();
        }
        if (this.parseViews != null) {
            oprot.writeFieldBegin(PARSE_VIEWS_FIELD_DESC);
            {
                oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.parseViews.size()));
                for (Map.Entry<String, edu.illinois.cs.cogcomp.thrift.base.Forest> _iter18 : this.parseViews.entrySet())
                {
                    oprot.writeString(_iter18.getKey());
                    _iter18.getValue().write(oprot);
                }
                oprot.writeMapEnd();
            }
            oprot.writeFieldEnd();
        }
        if (this.views != null) {
            oprot.writeFieldBegin(VIEWS_FIELD_DESC);
            {
                oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.views.size()));
                for (Map.Entry<String, edu.illinois.cs.cogcomp.thrift.base.View> _iter19 : this.views.entrySet())
                {
                    oprot.writeString(_iter19.getKey());
                    _iter19.getValue().write(oprot);
                }
                oprot.writeMapEnd();
            }
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WHITESPACED_FIELD_DESC);
        oprot.writeBool(this.whitespaced);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Record(");
        boolean first = true;

        sb.append("identifier:");
        if (this.identifier == null) {
            sb.append("null");
        } else {
            sb.append(this.identifier);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("rawText:");
        if (this.rawText == null) {
            sb.append("null");
        } else {
            sb.append(this.rawText);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("labelViews:");
        if (this.labelViews == null) {
            sb.append("null");
        } else {
            sb.append(this.labelViews);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("clusterViews:");
        if (this.clusterViews == null) {
            sb.append("null");
        } else {
            sb.append(this.clusterViews);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("parseViews:");
        if (this.parseViews == null) {
            sb.append("null");
        } else {
            sb.append(this.parseViews);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("views:");
        if (this.views == null) {
            sb.append("null");
        } else {
            sb.append(this.views);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("whitespaced:");
        sb.append(this.whitespaced);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
        if (identifier == null) {
            throw new TProtocolException("Required field 'identifier' was not present! Struct: " + toString());
        }
        if (rawText == null) {
            throw new TProtocolException("Required field 'rawText' was not present! Struct: " + toString());
        }
        if (labelViews == null) {
            throw new TProtocolException("Required field 'labelViews' was not present! Struct: " + toString());
        }
        if (clusterViews == null) {
            throw new TProtocolException("Required field 'clusterViews' was not present! Struct: " + toString());
        }
        if (parseViews == null) {
            throw new TProtocolException("Required field 'parseViews' was not present! Struct: " + toString());
        }
        if (views == null) {
            throw new TProtocolException("Required field 'views' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'whitespaced' because it's a primitive and you chose the non-beans generator.
    }

}

